name: Create Release

on:
  workflow_dispatch:
    inputs:
      bumpVersion:
        description: "Bump version"
        required: true
        default: patch
        type: choice
        options:
        - patch
        - minor
        - major

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.65.0

jobs:
  bump_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bv.outputs.new_version }}
    steps:
    - uses: actions/checkout@v3
    - name: Prepare branch
      run: |
        if [[ ! `git branch --show-current` = 'master' ]] ; then
          echo "Releases can only be created from the \`master\` branch" >&2
          exit 1
        fi
        git fetch --tags
        git checkout -b feature
    - name: Bump version
      id: bv
      run: |
        new_version=`scripts/bumb_version.py ${{ inputs.bumpVersion }}`
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
    - name: Create release branch
      id: crb
      run: |
        release_branch="release/v${NEW_VERSION}"
        git checkout -b "$release_branch"
        git \
          -c author.name=${{ github.actor }} \
          -c author.email=${{ github.actor }}@users.noreply.github.com \
          -c committer.name=Github \
          -c committer.email=noreply@github.com \
          commit -a -m "Prepare release v${NEW_VERSION}"
        git push --set-upstream origin "$release_branch"
        echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
      env:
        NEW_VERSION: ${{ steps.bv.outputs.new_version }}
    - name: Create pull request
      id: cpr
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/${{ env.REPO }}/pulls
        title: Release v${{ env.NEW_VERSION }}
        body: Bump to version v${{ env.NEW_VERSION }}.
        base: master
        head: ${{ env.RELEASE_BRANCH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_BRANCH: ${{ steps.crb.outputs.release_branch }}
    - name: Merge pull request
      uses: octokit/request-action@v2.x
      with:
        route: PUT /repos/${{ env.REPO }}/pulls/${{ env.PULL_NUMBER }}/merge
        commit_title: Prepare release v${{ env.NEW_VERSION }} (#${{ env.PULL_NUMBER }})
        merge_method: squash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PULL_NUMBER: ${{ fromJson(steps.cpr.outputs.data).number }}

  build:
    needs: bump_version
    runs-on: macos-latest
    outputs:
      artifact_name: ${{ steps.zza.outputs.artifact_name }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: master
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        default: true
    - name: Cache Rust
      uses: Swatinem/rust-cache@v2
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --verbose
    - name: Zip artifact
      id: za
      run: |
          artifact_name="hoc_v${NEW_VERSION//./_}_macos"
          cd target/release
          zip -r ../../${artifact_name}.zip hoc
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}.zip
      env:
        ARTIFACT_NAME: ${{ steps.za.outputs.artifact_name }}

  create_release:
    needs: [bump_version, build]
    env:
      REPO: ${{ github.repository }}
      NEW_VERSION: ${{ needs.bump_version.outputs.new_version }}
      ARTIFACT_NAME: ${{ needs.build.outputs.artifact_name }}
    runs-on: ubuntu-latest
    steps:
    - name: Get changelog body
      id: gcb
      run: |
        changelog_body=`scripts/changelog_body.py $NEW_VERSION`
        echo "changelog_body=${changelog_body}" >> $GITHUB_OUTPUT
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: artifact
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create release draft
      id: crd
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/${{ env.REPO }}/releases
        tag_name: v${{ env.NEW_VERSION }}
        target_commitish: master
        name: v${{ env.NEW_VERSION }}
        body: ${{ steps.gcb.outputs.changelog_body }}
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload artifact
      run: |
        curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "Content-Type: application/zip" \
          --data-binary @artifact/hoc \
          https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=${ARTIFACT_NAME}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: ${{ fromJson(steps.crd.outputs.data).id }}
    - name: Publish release
      uses: octokit/request-action@v2.x
      with:
        route: PATCH /repos/${{ env.REPO }}/releases/${{ env.RELEASE_ID }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: ${{ fromJson(steps.crd.outputs.data).id }}
