commands:
  - name: flash
    optionals: []
    arguments: []
    procedure:
      - description: Flashing image
        script: |
          options=( 'Debian 20' )
          STORE=index hoc in choose \
              --prompt '"Which image do you want to use?"' \
              --options "$( lines "${options[@]}" | stringify | listify)"

          image="${options[$index]}"
          STORE=image hoc do snake_case --string "$(stringify "$image")"

          echo "$image"

  - name: configure
    optionals:
      - name: cidr
        default: 10.1.0.0/16
    arguments:
      - name: node-name
    procedure:
      - description: Find local endpoints
        script: |
          hoc out set --regex '"([^ ]+) \\((.+)\\) at ([^ ]+) on (.+) \\[(.+)\\]"'
          hoc out set --search_strings []

          echo "Searching for local endpoints ..."
          arp -a | stringify | hoc out append --search_strings -
      - description: Rewrite endpoint output
        scriptRef: regex
      - description: Filter endpoints
        script: |
          hoc out set --endpoints []
          {%- for m in input.matches %}
          {%- if m|nth(n=0) != "?" %}
          hoc out append --endpoints '["{{ m | nth(n=0) }}","{{ m | nth(n=1) }}"]'
          {%- endif %}
          {%- endfor %}
      - description: Configure endpoint
        condition:
          expression: input.endpoints|length > 0
          message: No endpoints found to configure
        script: |
          # Prompt user for endpoint to configure.
          message='"Which endpoint do you want to configure?"'
          node_names=(
              {%- for m in input.endpoints %}
              {{ m | nth(n=0) | squote }}
              {%- endfor %}
          )
          options=(
              {%- for m in input.endpoints %}
              {{ m | nth(n=0) | squote }}' at '{{ m | nth(n=1) | squote }}
              {%- endfor %}
          )
          options="$(lines "${options[@]:-}" | stringify | listify)"
          STORE=index hoc in choose --prompt "$message" --options "$options"

          # Persist the endpoint.
          hoc state persist --node_name "$(stringify ${node_names[$index]})"

          # Determine credentials for SSH user.
          username={{ state.username | default(value="pi") | squote }}

          {%- if state.username %}
          echo "Using previously set up user '{{ state.username }}'"
          STORE=password hoc in hidden_input --prompt '"Password for {{ state.username }}"'
          {%- else %}
          echo "Using default credentials"
          password='raspberry'
          {%- endif %}

  - name: build
    arguments:
      - name: service
    optionals:
      - fromOptionalSet: git
    procedure:
      - builtIn: DockerBuild

  - name: publish
    arguments:
      - name: service
    optionals:
      - fromOptionalSet: git
    procedure:
      - builtIn: GitlabPublish

  - name: deploy
    arguments:
      - name: service
    optionals:
      - fromOptionalSet: git
    procedure:
      - builtIn: K8sDeploy

optionalSets:
  - name: git
    optionals:
      - name: branch
        default: master
      - name: protocol
        default: ssh
      - name: domain
        default: gitlab.com
      - name: project
        default: lidin-homepi

script:
  predefined:
    - name: regex
      description: Match search strings with regular expression
      source: |
        regex={{ input.regex | squote }}
        hoc out set --matches []

        {%- for search_string in input.search_strings %}
        [[ {{ search_string | squote }} =~ $regex ]]

        if [[ {% raw %} ${#BASH_REMATCH} {% endraw %} = 0 ]] ; then
            matches="[]"
        else
            matches="$(lines "${BASH_REMATCH[@]:1}" | stringify | listify)"
        fi

        hoc out append --matches "$matches"
        {%- endfor %}

  profile: |
    function _args {
        shift $1
        if [[ $# = 1 ]] ; then
            echo $1
        else
            cat
        fi
    }

    function _hocsync {
        IFS= read -r ${1:-} <{{ sync_pipe }} || true
    }

    function lines {
        printf "%s\n" "$@"
    }

    function escape {
        _args 2 "$@" | sed -r 's/((^|[^\\])(\\\\)*)'$1'/\1\\'$1'/g'
    }

    function squote {
        _args 1 "$@" | sed -r 's/('\'')/'\''\\\1'\''/' | sed -r 's/(.*)/'\''\1'\''/'
    }

    function stringify {
        _args 1 "$@" | escape '"' | sed -r 's/(.*)/"\1"/'
    }

    function listify {
        _args 1 "$@" | join_by ',' | sed -r 's/(.*)/[\1]/'
    }

    function prepend {
        _args 2 "$@" | sed -r "s/(.*)/$1\1/"
    }

    function append {
        _args 2 "$@" | sed -r "s/(.*)/\1$1/"
    }

    function join_by {
        local d=$1
        shift

        if [[ $# = 0 ]] ; then
            IFS= read -r out
            while IFS= read -r line ; do
                out="$out$line"
            done <<< "$(sed 's/^/'$d'/')"
            echo "$out"
        else
            local f=$1
            shift
            printf %s "$f" "${@/#/$d}" | append "\n"
        fi
    }

    function hoc {
        local ns=$1
        shift
        local cmd=$1
        shift

        local prefix="[hoc]:$ns:$cmd"
        local re='^--(.+)$'

        local flag ; unset flag

        local cmd_args=()
        local current_args=()
        local num_stdin=0

        for arg in "$@" ; do
            [[ "$arg" =~ $re ]]

            if [[ -z ${flag+x} ]] ; then
                if [[ {% raw %} ${#BASH_REMATCH[@]} {% endraw %} = 0 ]] ; then
                    echo "expected flag, got value: $arg" >&2
                    return 1
                fi

                flag="${BASH_REMATCH[1]}"
            else
                if [[ "$arg" = "-" ]] ; then
                    num_stdin=$(( num_stdin + 1 ))

                    current_args+=( "$flag=" )
                    cmd_args+=( "$(join_by ',' "${current_args[@]:-}")" )
                    current_args=()

                    unset flag
                elif [[ {% raw %} ${#BASH_REMATCH[@]} {% endraw %} = 2 ]] ; then
                    current_args+=( "$flag" )
                    flag="$arg"
                else
                    current_args+=( "$flag=$arg" )
                    unset flag
                fi
            fi
        done

        if [[ -n ${flag+x} ]] ; then
            current_args+=( "$flag" )
        fi

        cmd_args+=( "$(join_by ',' "${current_args[@]:-}")" )

        if [[ $num_stdin = 0 ]] ; then
            echo "$prefix($(join_by ',' "${cmd_args[@]:-}"))"
            _hocsync ${STORE:-}
            return 0
        fi

        while true ; do
            local args="${cmd_args[0]}"
            for i in `seq 1 $num_stdin` ; do
                if ! IFS= read -r value ; then
                    return 0
                fi

                if [[ -z ${cmd_args[$i]+x} ]] ; then
                    args="$args$value"
                else
                    args="$(join_by ',' "$args$value" "${cmd_args[$i]}")"
                fi
            done

            echo "$prefix($args)"
            _hocsync ${STORE:-}
        done
    }
